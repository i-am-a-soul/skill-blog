import{_ as e,o,c,e as t}from"./app-M6OZmubj.js";const i="/skill-blog/img/0032.png",l={},s=t('<h1 id="https通信流程" tabindex="-1"><a class="header-anchor" href="#https通信流程" aria-hidden="true">#</a> <code>HTTPS</code>通信流程</h1><p><img src="'+i+'" alt=""></p><p>上图展示了一次<code>HTTPS</code>请求过程中经历的步骤：</p><ol><li>浏览器需要先与服务端进行握手，将自己支持的加密算法发送给服务端。</li><li>服务端从中选出一组加密算法，并将自己的<code>SSL</code>证书（含公钥）发回给浏览器。</li><li>浏览器获得证书之后开始验证证书的合法性（颁发证书的机构是否合法、证书中包含的网站地址是否与正在访问的地址一致等），如果证书受信任，则浏览器栏里面会显示一个小锁头，否则会给出证书不受信任的提示。</li><li>如果证书受信任，或者用户接受了不受信任的证书，浏览器会生成一串随机数的密码，并用证书中提供的公钥加密发送给服务端。</li><li>网站接收浏览器发来的数据之后使用自己的私钥将信息解密取出密码，使用密码解密浏览器发来的握手信息，使用密码加密一段握手消息，发送给浏览器，告诉浏览器握手过程结束。</li><li>之后所有的通信数据将用之前浏览器生成的随机密码并利用对称加密算法进行加解密。</li></ol><p>总结起来就是服务端发送<code>SSL</code>证书给客户端进行校验，校验通过后客户端生成随机密钥发给服务端，双方使用该密钥进行加解密通信。</p>',5),_=[s];function a(d,r){return o(),c("div",null,_)}const p=e(l,[["render",a],["__file","HTTPS通信流程.html.vue"]]);export{p as default};
