import{_ as e,o as d,c,e as o}from"./app-M6OZmubj.js";const a={},t=o('<h1 id="头部字段" tabindex="-1"><a class="header-anchor" href="#头部字段" aria-hidden="true">#</a> 头部字段</h1><p>报文头部的结构和我们熟悉的<code>JSON</code>对象的结构非常类似，都是“<code>key: value</code>”的形式，中间以冒号相隔，其中字段名不区分大小写。头部字段类型分为<code>4</code>种，分别介绍如下。</p><h2 id="通用头部字段" tabindex="-1"><a class="header-anchor" href="#通用头部字段" aria-hidden="true">#</a> 通用头部字段</h2><p>请求报文和响应报文都会用到。重要的头部字段有以下几个。</p><h3 id="cache-control" tabindex="-1"><a class="header-anchor" href="#cache-control" aria-hidden="true">#</a> <code>cache-control</code></h3><p>这个字段是用来控制缓存的，它可以接收多个参数，参数之间以逗号“<code>,</code>”分隔。虽然它是通用字段，但是请求头部和响应头部使用的参数值还是略有不同。先来看请求报文和响应报文共用的值。</p><ul><li><code>no-cache</code>：<code>no-cache</code>值表明强制使用最新的值而不使用缓存值。如果请求头部包含<code>no-cache</code>，则表示客户端不接收缓存过的响应，缓存服务器必须把客户端请求转发给源服务器。如果响应中包含<code>no-cache</code>，那么缓存服务器不能对响应资源进行缓存。</li><li><code>no-store</code>：当使用<code>no-store</code>时表示对应的报文中包含机密信息，也就意味着不应该缓存当前内容。</li><li><code>no-transform</code>：缓存不能改变实体的媒体类型，能防止缓存服务器压缩图片等操作。</li><li><code>max-age</code>：缓存有效期，单位为秒。客户端请求中包含<code>max-age</code>时，如果缓存资源的缓存时间比指定时间数值更小时则接收缓存资源，当值为<code>0</code>时，缓存服务器会把请求转发给源服务器。当响应报文中包含<code>max-age</code>，缓存服务器不再确认资源的有效性，而以<code>max-age</code>数值作为缓存保存时长。</li></ul><p>请求头部常使用的值介绍如下。</p><ul><li><code>min-fresh</code>：数值，单位为秒。要求缓存服务器在指定的时间内返回响应。</li><li><code>only-if-cached</code>：客户端仅在缓存服务器本地缓存目标资源的情况下才会要求其返回值，也就是说不会向源服务器转发请求。</li></ul><p>响应头部常使用的值介绍如下。</p><ul><li><code>must-revalidate</code>：本地缓存过期前可以使用，否则必须进行有效性检验。</li><li><code>public</code>：响应可被任何对象缓存，没有限制。</li><li><code>private</code>：响应只能被特定用户缓存，不能被其他用户使用。</li><li><code>proxy-revalidate</code>：仅适用于共享缓存，私有缓存时忽略。</li></ul><p>这些值虽然比较多，但是大多都是语义化的，通过单词即可猜测其大概意思，所以一般不需要强行记忆，使用时如果辨识不了再查文档即可。</p><h3 id="connection" tabindex="-1"><a class="header-anchor" href="#connection" aria-hidden="true">#</a> <code>connection</code></h3><p>它的常用值有两个，介绍如下。</p><ul><li><code>Close</code>：当一方头部<code>connection</code>值为<code>Close</code>时，代表关闭此次连接。</li><li><code>Keep-Alive</code>：<code>HTTP/1.1</code>版本默认连接是持久的。对于之前的版本，需要指定值为<code>Keep-Alive</code>。</li></ul><p>除此之外，还可以设置其他的值，比如值是<code>aaa</code>时，那么代理服务器将在转发时删除头部<code>aaa</code>字段信息。</p><h3 id="date" tabindex="-1"><a class="header-anchor" href="#date" aria-hidden="true">#</a> <code>date</code></h3><p>这是一个常用字段，很好理解，就是报文创建的时间日期。</p><h2 id="请求头部字段" tabindex="-1"><a class="header-anchor" href="#请求头部字段" aria-hidden="true">#</a> 请求头部字段</h2><p>下面这些字段只能用于请求头部。</p><h3 id="accept" tabindex="-1"><a class="header-anchor" href="#accept" aria-hidden="true">#</a> <code>accept</code></h3><p>先看看一个<code>HTTP</code>请求头部<code>accept</code>字段的值，我们对照它进行分析：</p><p><code>accept: text/html,application/xhtml+xml,application/xml;q=0.9,img/webp,*/*;q=0.8</code></p><p><code>accept</code>字段可以设置多个值，每个值通过逗号”<code>,</code>“分隔（而不是分号”<code>;</code>“），所以这里有<code>5</code>个值，分别是：</p><ul><li><code>text/html</code></li><li><code>application/xhtml+xml</code></li><li><code>application/xml;q=0.9</code></li><li><code>image/webp</code></li><li><code>*/*;q=0.8</code></li></ul><p>第<code>1</code>、<code>2</code>、<code>4</code>个值的格式都为”<code>MIME</code>类型<code>/MIME</code>子类型“，<code>MIME</code>是<code>Multipurpose Internet Mail Extensions</code>（多用途因特网邮件扩展）的简称，是专门用来表示文档性质和格式的标准，浏览器通常使用<code>MIME</code>类型而不是文件扩展名来确定如何处理文档。常见的<code>MIME</code>类型与子类型如表所示。</p><table><thead><tr><th>类型</th><th>描述</th><th>子类型</th></tr></thead><tbody><tr><td>text</td><td>文本文件</td><td>plain, html, css, javascript</td></tr><tr><td>image</td><td>图片文件</td><td>gif, png, jpeg, bmp, webp</td></tr><tr><td>audio</td><td>音频文件</td><td>mdi, mpeg, webm, ogg, wav</td></tr><tr><td>video</td><td>视频文件</td><td>webm, ogg</td></tr><tr><td>application</td><td>二进制文件</td><td>json, xhtml+xml, pdf, xml, x-www-form-urlencoded, octet-stream</td></tr><tr><td>multipart</td><td>复合文件</td><td>form-data</td></tr></tbody></table><p>第<code>3</code>个值不但有<code>MIME</code>类型和子类型，还出现了一个<code>q</code>变量的表达式。这个表达式的含义是给当前类型赋予权重。权重值<code>q</code>的范围是<code>0~1</code>，可精确到小数点后<code>3</code>位，和<code>MIME</code>子类型通过分号”<code>;</code>“分隔，默认权重都为<code>1</code>。服务器端优先返回权重较大的类型，如果权重相等，则按照从左至右的顺序处理。后面很多其他字段值也可以用这种方式来设置权重。</p><p>第<code>5</code>个值没有指明<code>MIME</code>类型，而是用星号”<code>*</code>“作为通用匹配符，代表任意类型都可以。</p><p>上面的请求报文实例中的<code>accept</code>字段值为”<code>*/*</code>“，代表可以接收所有类型的数据，很可能是客户端没有设置<code>accept</code>而使用的默认值。</p><h3 id="accept-charset" tabindex="-1"><a class="header-anchor" href="#accept-charset" aria-hidden="true">#</a> <code>accept-charset</code></h3><p>告知服务端客户端可以处理的字符集类型，通常不需要额外设置此项，每种文件类型都有其默认的字符集类型，这个字段也支持权重设置，设置规则同<code>accept</code>。</p><h3 id="accept-encoding" tabindex="-1"><a class="header-anchor" href="#accept-encoding" aria-hidden="true">#</a> <code>accept-encoding</code></h3><p>客户端能够接收的编码方式，通常这个字段会是某种压缩算法，比如<code>gzip</code>、<code>compress</code>。这个字段也支持权重设置，设置规则同<code>accept</code>。</p><h3 id="accept-language" tabindex="-1"><a class="header-anchor" href="#accept-language" aria-hidden="true">#</a> <code>accept-language</code></h3><p>客户端可以解析的自然语言，可以一次指定多个语言并设置权重，常用的值有<code>zh-cn</code>和<code>en-us</code>。</p><h3 id="authorization" tabindex="-1"><a class="header-anchor" href="#authorization" aria-hidden="true">#</a> <code>authorization</code></h3><p>用来告知服务器端认证信息。通常会在收到<code>401</code>状态码之后，在请求头部加入此字段，它的值是：<code>type credentials</code>。</p><h3 id="host" tabindex="-1"><a class="header-anchor" href="#host" aria-hidden="true">#</a> <code>host</code></h3><p>用来告知服务器端请求资源所处的互联网主机名和端口号，如果不指定端口则会使用默认端口。这是唯一一个请求头部的必传字段。这是因为服务器在接收到请求之后会将请求中的主机名替换成<code>IP</code>地址，但是如果这时相同<code>IP</code>地址下部署了多个域名，则服务器将无法转发对应的请求。因此需要使用首部字段来明确指出请求的主机名。</p><h3 id="if-modified-since" tabindex="-1"><a class="header-anchor" href="#if-modified-since" aria-hidden="true">#</a> <code>if-modified-since</code></h3><p><code>if-modified-since</code>这个字段值通常是一个日期，用来确认代理或客户端本地资源的有效性。服务器端在接收这个值后会与资源最新更新时间进行对比，如果在字段值指定的日期之后资源发生了更新，则服务器端会返回最新的资源，否则将返回<code>304</code>状态码响应客户端。</p><h3 id="if-none-match" tabindex="-1"><a class="header-anchor" href="#if-none-match" aria-hidden="true">#</a> <code>if-none-match</code></h3><p><code>if-none-match</code>的作用和<code>if-modified-since</code>类似，用于判断本地缓存是否有效。<code>if-none-match</code>通常存储的是上一次响应头部的<code>ETag</code>值，当<code>if-none-match</code>指定的值与资源的<code>ETag</code>值不一致时，服务器端才会处理请求。</p><h2 id="响应头部字段" tabindex="-1"><a class="header-anchor" href="#响应头部字段" aria-hidden="true">#</a> 响应头部字段</h2><h3 id="age" tabindex="-1"><a class="header-anchor" href="#age" aria-hidden="true">#</a> <code>age</code></h3><p>字段值为数值，单位为秒，该字段能告知客户端服务器端在多久前创建了响应，若创建该响应的是缓存服务器，<code>age</code>值指的是缓存后的响应再次发起认证到认证完成的时间。代理创建响应必须加上<code>age</code>字段。</p><h3 id="etag" tabindex="-1"><a class="header-anchor" href="#etag" aria-hidden="true">#</a> <code>ETag</code></h3><p>服务器端在每次资源更新之后，都会生成一个唯一对应的标识，这个标识就是<code>ETag</code>值。<code>ETag</code>值的生成算法由服务器端自行决定，并没有统一的要求。</p><p><code>ETag</code>中有强<code>ETag</code>和弱<code>ETag</code>之分。强<code>ETag</code>只要资源发生变化就会改变值，而弱<code>ETag</code>值只用于提示资源是否相同，只有资源发生了较大改变的时候才会改变<code>ETag</code>值。</p><p>它们可以通过值的格式来进行区分，弱<code>ETag</code>值相对于强<code>ETag</code>值会加上<code>W/</code>来表示。</p><p>强<code>ETag</code>：<code>&quot;asdfc12312&quot;</code></p><p>弱<code>ETag</code>：<code>W/&quot;asdfc12312&quot;</code></p><h3 id="location" tabindex="-1"><a class="header-anchor" href="#location" aria-hidden="true">#</a> <code>location</code></h3><p>使用头部字段<code>location</code>可以引导请求发起方至某个与请求<code>URL</code>位置不同的资源，一般会配合<code>3xx</code>的状态码进行使用，比如<code>302</code>。</p><h3 id="www-authenticate" tabindex="-1"><a class="header-anchor" href="#www-authenticate" aria-hidden="true">#</a> <code>www-authenticate</code></h3><p>用于告知客户端当前服务器端可接收的认证方案，然后客户端可在<code>authentication</code>字段值中返回对应的值。</p><h2 id="实体头部字段" tabindex="-1"><a class="header-anchor" href="#实体头部字段" aria-hidden="true">#</a> 实体头部字段</h2><p>实体头部字段是包含在请求报文和响应报文中的实体部分所使用的头部，用于补充与实体相关的信息。</p><h3 id="allow" tabindex="-1"><a class="header-anchor" href="#allow" aria-hidden="true">#</a> <code>allow</code></h3><p>用于通知客户端能够支持的<code>HTTP</code>请求方法。当服务器端接收到不支持的<code>HTTP</code>请求方法时，会响应状态信息<code>405 Method Not Allowed</code>，同时把支持的方法写入<code>allow</code>字段。</p><h3 id="content-encoding" tabindex="-1"><a class="header-anchor" href="#content-encoding" aria-hidden="true">#</a> <code>content-encoding</code></h3><p>用于告知客户端当前相应内容的编码方式，和请求头部字段<code>accept-encoding</code>的可选值一致，主要采用<code>4</code>种编码方式：<code>gzip</code>、<code>compress</code>、<code>deflate</code>、<code>identity</code>。</p><h3 id="content-length" tabindex="-1"><a class="header-anchor" href="#content-length" aria-hidden="true">#</a> <code>content-length</code></h3><p>表明实体部分的大小，单位为字节。</p><h3 id="content-type" tabindex="-1"><a class="header-anchor" href="#content-type" aria-hidden="true">#</a> <code>content-type</code></h3><p>与请求头部字段<code>accept</code>对应，表明响应实体内容的<code>MIME</code>类型。</p><h3 id="last-modified" tabindex="-1"><a class="header-anchor" href="#last-modified" aria-hidden="true">#</a> <code>last-modified</code></h3><p>资源的最后修改时间。同样是和缓存配合使用。</p><h3 id="expires" tabindex="-1"><a class="header-anchor" href="#expires" aria-hidden="true">#</a> <code>expires</code></h3><p>值为失效日期，缓存服务器在接收到含有头部字段<code>expires</code>的响应之后，会以缓存来应答请求，在<code>expires</code>值指定的日期之前，响应的值会一直被缓存，如果过期则在收到新的请求之后重新向源服务器发起请求。当头部<code>cache-control</code>值有<code>max-age</code>时，优先处理<code>max-age</code>。</p><h2 id="其他头部字段" tabindex="-1"><a class="header-anchor" href="#其他头部字段" aria-hidden="true">#</a> 其他头部字段</h2><p><code>HTTP</code>的头部信息是可以自定义的，服务器端和客户端都可以根据需要进行扩展。例如<code>X-Frame-Options</code>就常作为响应头部字段，用来表示网站内容是否允许被嵌入其他网站的<code>iframe</code>中。当其值为<code>deny</code>时就表示禁止被作为<code>iframe</code>嵌入，这样可以有效地防止常见的点击劫持。</p>',73),i=[t];function h(n,r){return d(),c("div",null,i)}const l=e(a,[["render",h],["__file","头部字段.html.vue"]]);export{l as default};
