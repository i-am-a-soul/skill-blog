import{_ as c,r as s,o as d,c as l,a as e,b as o,d as t,e as a}from"./app-M6OZmubj.js";const i="/skill-blog/img/0059.png",p="/skill-blog/img/0097.jpg",r="/skill-blog/img/0100.png",u="/skill-blog/img/0102.png",h="/skill-blog/img/0121.jpg",y={},b=a('<h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h1><h2 id="获取一个库的声明文件" tabindex="-1"><a class="header-anchor" href="#获取一个库的声明文件" aria-hidden="true">#</a> 获取一个库的声明文件</h2><p><img src="'+i+`" alt=""></p><h2 id="key未知" tabindex="-1"><a class="header-anchor" href="#key未知" aria-hidden="true">#</a> <code>key</code>未知</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">interface</span> <span class="token class-name">IObj</span> <span class="token punctuation">{</span>
  <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="tsconfig-json选项" tabindex="-1"><a class="header-anchor" href="#tsconfig-json选项" aria-hidden="true">#</a> <code>tsconfig.json</code>选项</h2><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>include</td><td><code>TSC</code>在哪个文件夹中寻找<code>TypeScript</code>文件</td></tr><tr><td>lib</td><td><code>TSC</code>假定运行代码的环境中有哪些<code>API</code>。包括<code>ES5</code>的<code>Function.prototype.bind</code>、<code>ES2015</code>的<code>Object.assign</code>和<code>DOM</code>的<code>document.querySelector</code></td></tr><tr><td>module</td><td><code>TSC</code>把代码编译成哪个模块系统（<code>CommonJS</code>、<code>SystemJS</code>、<code>ES2015</code>等）</td></tr><tr><td>outDir</td><td><code>TSC</code>把生成的<code>JavaScript</code>代码放在哪个文件夹中</td></tr><tr><td>strict</td><td>检查无效代码时尽量严格。该选项强制所有代码都正确声明了类型。</td></tr><tr><td>target</td><td><code>TSC</code>把代码编译成哪个<code>JavaScript</code>版本（<code>ES3</code>、<code>ES5</code>、<code>ES2015</code>、<code>ES2016</code>等）</td></tr></tbody></table><h2 id="子类型和超类型" tabindex="-1"><a class="header-anchor" href="#子类型和超类型" aria-hidden="true">#</a> 子类型和超类型</h2><p>给定两个类型<code>A</code>和<code>B</code>，假设<code>B</code>是<code>A</code>的子类型，那么在需要<code>A</code>的地方都可以放心使用<code>B</code>。</p><ul><li><p>所有类型都是<code>any</code>的子类型</p></li><li><p><code>never</code>是所有类型的子类型</p></li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,11),m={href:"https://www.typescriptlang.org/docs/handbook/interfaces.html#indexable-types",target:"_blank",rel:"noopener noreferrer"},k=e("li",null,[e("p",null,[e("code",null,"tsc --watch code.ts")])],-1),g=e("li",null,[e("p",null,[e("code",null,"type Maybe<T> = T | null;")])],-1),_=e("li",null,[e("p",null,[e("img",{src:p,alt:""})])],-1),f={href:"https://github.com/microsoft/TypeScript/blob/main/lib/lib.es5.d.ts",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.typescriptlang.org/docs/handbook/utility-types.html#recordkeystype",target:"_blank",rel:"noopener noreferrer"},w=a(`<li><p><code>never</code>是<code>union</code>运算的幺元：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">type</span> <span class="token class-name"><span class="token constant">A</span></span> <span class="token operator">=</span> <span class="token builtin">number</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">;</span> <span class="token comment">// type A = number</span>
<span class="token keyword">type</span> <span class="token class-name"><span class="token constant">B</span></span> <span class="token operator">=</span> <span class="token builtin">any</span> <span class="token operator">|</span> <span class="token builtin">never</span><span class="token punctuation">;</span> <span class="token comment">// type B = any</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p><img src="`+r+'" alt=""></p></li><li><p><img src="'+u+'" alt=""></p></li><li><p>少数情况下，如果你确实无法预知一个值的类型，不要使用<code>any</code>，应该使用<code>unknown</code>。与<code>any</code>类似，<code>unknown</code>也表示任何值，但是<code>TypeScript</code>会要求你再做检查、细化类型。</p></li><li><p>并集使用<code>|</code>，交集使用<code>&amp;</code>。</p></li><li><p><code>T</code>、<code>U</code>、<code>V</code>、<code>W</code>。</p></li><li><p>装饰器就是在装饰目标上调用函数的一种语法。</p></li><li><p>如果想让<code>TypeScript</code>推导的类型尽量窄一些，请使用<code>as const</code>，<code>const</code>不仅能阻止拓宽类型，还将递归把成员设为<code>readonly</code>，不管数据结构的嵌套层级有多深。</p></li><li><p><code>React</code>有自己的一套<code>DOM</code>事件包装类型。处理<code>React</code>事件时，必须使用<code>React</code>的事件类型，不能使用常规的<code>DOM</code>事件类型。</p></li><li><p><code>strictNullChecks</code>：When type checking, take into account <code>null</code> and <code>undefined</code>.</p></li><li><p>Don&#39;t use <code>{}</code> as a type. <code>{}</code> actually means &quot;any non-nullish value&quot;.</p><ul><li><p>If you want a type meaning &quot;any object&quot;, you probably want <code>Record&lt;string, unknown&gt;</code> instead.</p></li><li><p>If you want a type meaning &quot;any value&quot;, you probably want <code>unknown</code> instead.</p></li><li><p>If you want a type meaning &quot;empty object&quot;, you probably want <code>Record&lt;string, never&gt;</code> instead.</p></li></ul></li><li><p><code>// @ts-expect-error</code></p></li>',12),S={href:"https://stackoverflow.com/questions/69021040/why-catch-clause-variable-type-annotation-must-be-any",target:"_blank",rel:"noopener noreferrer"},x=e("li",null,[e("p",null,[e("img",{src:h,alt:""})])],-1);function T(q,E){const n=s("ExternalLinkIcon");return d(),l("div",null,[b,e("ul",null,[e("li",null,[e("p",null,[e("a",m,[o("Indexable Types"),t(n)])])]),k,g,_,e("li",null,[e("p",null,[e("a",f,[o("lib.es5.d.ts"),t(n)])])]),e("li",null,[e("p",null,[e("a",v,[o("Utility Types"),t(n)])])]),w,e("li",null,[e("p",null,[o('Catch 子句变量类型注释必须为 "any" 或 "unknown" (若已指定)：'),e("a",S,[o("链接"),t(n)])])]),x])])}const C=c(y,[["render",T],["__file","index.html.vue"]]);export{C as default};
