import{_ as i,o as l,c as e,e as a}from"./app-M6OZmubj.js";const d={},c=a('<h1 id="设计模式类型" tabindex="-1"><a class="header-anchor" href="#设计模式类型" aria-hidden="true">#</a> 设计模式类型</h1><h2 id="创建型" tabindex="-1"><a class="header-anchor" href="#创建型" aria-hidden="true">#</a> 创建型</h2><p>创建型的<code>5</code>种设计模式提供了更加灵活的对象创建方式，同时可以隐藏创建的具体逻辑。与直接使用<code>new</code>运算符实例化对象相比，这些模式具有更强的灵活性及可定制性。</p><ul><li>简单工厂模式</li><li>工厂方法模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>单例模式</li></ul><h2 id="结构型" tabindex="-1"><a class="header-anchor" href="#结构型" aria-hidden="true">#</a> 结构型</h2><p>结构型的<code>7</code>种设计模式关注类和对象的组合，结合继承的概念，这些设计模式能使对象具有更加灵活的功能设定。</p><ul><li>适配器模式</li><li>桥模式</li><li>组合模式</li><li>装饰器模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h2 id="行为型" tabindex="-1"><a class="header-anchor" href="#行为型" aria-hidden="true">#</a> 行为型</h2><p>行为型的<code>11</code>种设计模式聚焦于对象和类之间的通信，这是构建大型程序架构必不可少的部分。</p><ul><li>职责链模式</li><li>命令模式</li><li>迭代器模式</li><li>中介者模式</li><li>备忘录模式</li><li>观察者模式（发布<code>-</code>订阅模式）</li><li>访问者模式</li><li>策略模式</li><li>状态模式</li><li>模板方法模式</li><li>解释器模式</li></ul>',10),r=[c];function o(h,t){return l(),e("div",null,r)}const s=i(d,[["render",o],["__file","设计模式类型.html.vue"]]);export{s as default};
