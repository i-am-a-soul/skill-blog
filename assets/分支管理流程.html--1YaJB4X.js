import{_ as e,o,c as d,e as c}from"./app-M6OZmubj.js";const t="/skill-blog/img/0021.png",p="/skill-blog/img/0022.png",i="/skill-blog/img/0023.png",r="/skill-blog/img/0024.png",a={},s=c('<h1 id="分支管理流程" tabindex="-1"><a class="header-anchor" href="#分支管理流程" aria-hidden="true">#</a> 分支管理流程</h1><h2 id="github-flow" tabindex="-1"><a class="header-anchor" href="#github-flow" aria-hidden="true">#</a> <code>GitHub Flow</code></h2><p><code>GitHub Flow</code>是一种基于分支来工作的轻量化的分支管理方案，适合于开发者相对较多、需要频繁发布版本的项目。<code>GitHub</code>网站上目前使用的就是这一套流程。主要流程介绍如下。</p><p>（1）创建功能分支。<code>master</code>分支作为一个受保护的分支，是不允许直接修改的，同时保证<code>master</code>分支上的代码是随时可以部署运行的。如果需要修改代码，则从<code>master</code>分支上签出新的分支，分支可以根据功能命名，然后在新的分支上修改代码。</p><p>（2）提交代码。提倡频繁细粒度地提交代码，比如每次新增、修改或删除一个文件都可以提交一次，并给予相应的注释，这样方便代码出现<code>bug</code>时进行回滚，同时也方便后续的开发者快速了解分支内容。</p><p>（3）开启拉取请求。拉取请求的专业术语为“<code>Pull Request</code>”，简称“<code>PR</code>”。这一步是整个流程中相当重要的一步。开发者可以向目标分支（一般是<code>master</code>分支）发起<code>PR</code>，此时其他开发者将可以看到该分支的提交记录。一般来说这个过程发生在功能完成之后，但是如果在开发过程中遇到问题也可以开启<code>PR</code>并“<code>@</code>”其他开发者来获取帮助，以继续完成开发。</p><p>（4）讨论和回顾代码。如果<code>PR</code>有问题需要其他开发者协助解决，那么可能会引起一些讨论。如果分支开发完成，那么可能会进入代码审核流程，检查代码是否符合项目的开发规范，或者是否包含必须的单元测试等。</p><p>（5）部署和测试代码。分支在被合并之前必须确认代码是可执行的，没有明显的<code>bug</code>，而且测试代码和测试覆盖率能顺利通过。</p><p>（6）合并分支。当以上步骤完成之后，待合并的分支终于可以被合并到<code>master</code>分支了，合并完成之后，与之关联的<code>issue</code>都会被关闭。</p><p><img src="'+t+'" alt=""></p><h2 id="git-flow" tabindex="-1"><a class="header-anchor" href="#git-flow" aria-hidden="true">#</a> <code>Git Flow</code></h2><p><code>Git Flow</code>是<code>Git</code>官方推出的默认工作流程，其整个流程介绍如下。</p><p>（1）创建分支。在终端执行<code>git flow init</code>命令即可开启<code>Git Flow</code>模式，如图所示。</p><p><img src="'+p+'" alt=""></p><p>执行上面的操作之后，将会在分支上配置一些命名规则，并且会默认创建<code>master</code>和<code>develop</code>两个分支。</p><ul><li><code>master</code>分支。和<code>GitHub Flow</code>一样，<code>master</code>分支也是受保护分支，不能直接提交代码，而是在其他指定的、独立的特性分支中进行修改和提交。不直接提交改动到<code>master</code>分支上也是很多工作流程的一个共同的规则。</li><li><code>develop</code>分支。是进行任何新的开发的基础分支。当开始一个新的功能分支时，它将是开发的基础。另外，该分支也汇集所有已经完成的功能，并等待被整合到<code>master</code>分支中。</li></ul><p>这两个分支被称作长期分支，它们会存活在项目的整个生命周期中。而其他的分支，例如针对功能的分支，针对发行的分支，仅仅只是临时存在的，它们是根据需要来创建的，当它们完成了自己的任务之后就会被删除掉。</p><p>（2）功能开发。同样使用<code>git flow</code>命令来操作。首先你需要创建一个新的<code>feature</code>分支：</p><p><code>git flow feature start xxx</code></p><p>然后在新的分支上进行开发，开发完成之后可以使用命令将新的分支合并到<code>develop</code>分支：</p><p><code>git flow feature finish xxx</code></p><p>（3）代码发布。当<code>develop</code>分支聚集到足够的功能分支且新功能已经被测试和修复过之后，就可以使用相应的命令进行发布了：</p><p><code>git flow release start x.x.x</code></p><p>其中<code>start</code>之后一般是以“<code>.</code>”相隔的<code>3</code>位数版本号，此时会从<code>develop</code>分支签出一个新的分支，完成对应的修改后（比如修改项目配置文件的版本号等）就可以执行命令完成了：</p><p><code>git flow release finish x.x.x</code></p><p>此时<code>Git</code>会拉取远程仓库分支到本地，再合并到<code>master</code>和<code>develop</code>两个分支中去，然后删除<code>release</code>分支并切换到<code>develop</code>分支。此时新的代码已经更新到<code>master</code>分支了。</p><p>（4）代码修复。往往<code>master</code>分支运行起来会碰到一些<code>bug</code>，此时可以创建新的分支来修复它，再次使用<code>git flow</code>命令：</p><p><code>git flow hotfix start xxx</code></p><p>这个命令会从<code>master</code>分支签出一个用来修复<code>bug</code>的分支，当修改完成之后可以通过命令合并它：</p><p><code>git flow hotfix finish xxx</code></p><p>完成改动后修复<code>bug</code>的分支会被合并到<code>master</code>分支和<code>develop</code>分支中，同时删除该分支并切换回<code>develop</code>分支。</p><p><img src="'+i+'" alt=""></p><h2 id="gitlab-flow" tabindex="-1"><a class="header-anchor" href="#gitlab-flow" aria-hidden="true">#</a> <code>GitLab Flow</code></h2><p>要理解<code>GitLab Flow</code>必须先回顾一下<code>Git Flow</code>和<code>GitHub Flow</code>。<code>Git Flow</code>和<code>GitHub Flow</code>都制定了一套切实可行的分支管理流程，都能有效地避免分支混乱的情况，但是它们也有缺陷。</p><p>先看<code>Git Flow</code>。它至少存在以下两个问题。</p><ul><li><code>master</code>分支作用被削弱。开发者都是利用<code>develop</code>分支进行开发的，<code>master</code>分支只用来部署可运行的代码，而无论是开发工具还是<code>Git</code>仓库都把<code>master</code>分支作为默认分支，这使得在实际开发中需要频繁地切换分支。</li><li>分支种类变得复杂。包括<code>develop</code>分支、<code>master</code>分支、<code>feature</code>分支、<code>release</code>分支、<code>hotfix</code>分支共<code>5</code>种分支，更多的分支意味着更多的操作，大量的时间会被花费在创建分支、合并分支、销毁分支这些与开发无关的重复操作上，同时也更容易出现错误。</li></ul><p>所以这种复杂的分支管理流程难以满足快速开发发布的需求，于是<code>GitHub</code>推出了轻量级的<code>GitHub Flow</code>方案。但是这种方案也有一些问题，如部署、环境设置、发布和<code>issue</code>管理等。</p><p><code>GitLab Flow</code>为了避免<code>Git Flow</code>存在的两大问题，首先是取消<code>develop</code>分支，采取了基于<code>master</code>进行签出和合并的策略，同时将<code>issue</code>和<code>feature</code>分支紧紧结合在一起。以常见的<code>Web</code>开发场景为例，<code>GitLab Flow</code>的具体流程介绍如下。</p><p>（1）规划好<code>master</code>、<code>pre-production</code>、<code>production</code>这<code>3</code>个分支（当然这里可以是多个分支层层合并，处理方式与<code>3</code>个分支的场景基本一致，这里我们以<code>3</code>个分支为例）。其中<code>master</code>分支用于签出代码和合并代码；<code>pre-production</code>从<code>master</code>分支签出，用于部署到预发布环境（测试环境）；<code>production</code>分支从<code>pre-production</code>分支签出，用于部署到线上环境。</p><p>（2）每次开发新功能或修复<code>bug</code>时，先创建一个<code>issue</code>，声明该分支的主要作用和需要修改的代码内容。从<code>master</code>分支签出一个新的分支，这个分支的命名必须以之前创建的<code>issue</code>编号开头，比如“<code>15-auth-add-verifycode</code>”，然后在此分支上进行开发，在后面的步骤中我们称为<code>feature</code>分支。这样做的好处就是代码合并到<code>master</code>分支之后该对应编号的<code>issue</code>就会自动关闭。</p><p>（3）<code>feature</code>分支开发完成之后先使用<code>rebase</code>命令来合并多个<code>commits</code>记录，以避免<code>commits</code>记录太多造成混乱。执行完<code>rebase</code>操作之后再<code>push</code>到远程分支，同时提起<code>Merge Request</code>。</p><p>（4）对代码进行检查和测试，通过之后合并入<code>master</code>分支。此时<code>master</code>分支已处于可测试、可运行状态，可以部署到开发环境进行测试。</p><p>（5）如果<code>master</code>分支测试通过，删除<code>feature</code>分支，同时向<code>pre-production</code>分支发起<code>Merge Request</code>进行进一步测试，通过之后再向<code>production</code>分支发起<code>Merge Request</code>，合并之后更新线上环境。当然如果该分支需要紧急更新（比如修复某个严重<code>bug</code>），那么可以不删除<code>feature</code>分支，直接把<code>feature</code>分支合并到<code>pre-production</code>进行测试。</p><p><img src="'+r+'" alt=""></p>',44),l=[s];function u(m,n){return o(),d("div",null,l)}const g=e(a,[["render",u],["__file","分支管理流程.html.vue"]]);export{g as default};
