import{_ as o,r as p,o as l,c,a as n,b as s,d as e,e as t}from"./app-M6OZmubj.js";const i="/skill-blog/img/0077.png",u="/skill-blog/img/0078.png",d={},r=n("h1",{id:"知识点",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#知识点","aria-hidden":"true"},"#"),s(" 知识点")],-1),k=n("h2",{id:"gosumdb、gonosumdb",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#gosumdb、gonosumdb","aria-hidden":"true"},"#"),s(),n("code",null,"GOSUMDB"),s("、"),n("code",null,"GONOSUMDB")],-1),m=n("p",null,"参考资料：",-1),v={href:"https://goproxy.io/zh/docs/GOSUMDB-env.html",target:"_blank",rel:"noopener noreferrer"},b=t('<h2 id="go-modules" tabindex="-1"><a class="header-anchor" href="#go-modules" aria-hidden="true">#</a> <code>Go Modules</code></h2><p><img src="'+i+'" alt=""></p><p><img src="'+u+`" alt=""></p><p><code>If an old package and a new package have the same import path, the new package must be backwards compatible with the old package.</code></p><h2 id="go语句" tabindex="-1"><a class="header-anchor" href="#go语句" aria-hidden="true">#</a> <code>go</code>语句</h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">for</span> i <span class="token operator">:=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span> <span class="token punctuation">{</span>
		<span class="token keyword">go</span> <span class="token keyword">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>
		<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// 控制台什么都没有输出</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> <code>range</code></h2><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">func</span> main <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	arr <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span><span class="token builtin">int</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">}</span>
	maxIdx <span class="token operator">:=</span> <span class="token function">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
	<span class="token keyword">for</span> idx<span class="token punctuation">,</span> ele <span class="token operator">:=</span> <span class="token keyword">range</span> arr <span class="token punctuation">{</span>
		<span class="token keyword">if</span> idx <span class="token operator">==</span> maxIdx <span class="token punctuation">{</span>
			arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ele
		<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
			arr<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> ele
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token comment">// [7 3 5 7 8 11] 而不是 [22 3 6 10 15 21]</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参数路由" tabindex="-1"><a class="header-anchor" href="#参数路由" aria-hidden="true">#</a> 参数路由</h2><h3 id="命名参数" tabindex="-1"><a class="header-anchor" href="#命名参数" aria-hidden="true">#</a> 命名参数</h3><p>命名参数只匹配单个路径段。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Pattern: /user/:user

/user/gordon                match
/user/gardon/profile        no match
/user/                      no match
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="通配参数" tabindex="-1"><a class="header-anchor" href="#通配参数" aria-hidden="true">#</a> 通配参数</h3><p>通配参数匹配到路径的末尾，所以它必须位于模式的末尾。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Pattern: /src/*filepath

/src/                          match
/src/somefile.go               match
/src/subdir/somefile.go        match
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="传值还是传指针" tabindex="-1"><a class="header-anchor" href="#传值还是传指针" aria-hidden="true">#</a> 传值还是传指针</h2><p>在参数<code>/</code>接收器中，推荐传值的场景：</p><ul><li><code>map</code>、<code>chan</code>、<code>func</code>等引用类型</li><li>不需要扩容的<code>slice</code></li></ul><p>在参数<code>/</code>接收器中，推荐传指针的场景：</p><ul><li>会发生扩容的<code>slice</code></li><li>需要修改参数<code>/</code>接收器自身内容的场景</li><li>庞大的结构体或数组</li><li>包含<code>sync.Mutex</code>或类似用于同步的成员</li><li>搞不清楚该传值还是传指针</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>`,21),h={href:"https://jfrog.com/blog/why-goproxy-matters-and-which-to-pick/",target:"_blank",rel:"noopener noreferrer"},g=n("li",null,[n("p",null,[n("code",null,"go get: installing executables with 'go get' in module mode is deprecated. Use 'go install pkg@version' instead.")])],-1),f=n("li",null,[n("p",null,[n("code",null,"go env")])],-1),_={href:"https://maelvls.dev/go111module-everywhere/",target:"_blank",rel:"noopener noreferrer"},x=n("li",null,[n("p",null,[n("code",null,"gin.H"),s("即"),n("code",null,"map[string]interface{}")])],-1),y={href:"https://doc.yonyoucloud.com/doc/wiki/project/the-way-to-go/10.5.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://levelup.gitconnected.com/struct-field-tags-in-go-fcc2428a1f91",target:"_blank",rel:"noopener noreferrer"},P=n("code",null,"Struct Field Tags",-1),q=n("li",null,[n("p",null,[n("code",null,"map"),s("和"),n("code",null,"slice"),s("是非线程安全的")])],-1),O=n("code",null,"As in all languages in the C family, everything in Go is passed by value.",-1),G={href:"https://go.dev/doc/faq#pass_by_value",target:"_blank",rel:"noopener noreferrer"},B=t(`<li><p><code>make</code>只能用于<code>slice</code>、<code>map</code>和<code>channel</code></p></li><li><p>正确释放互斥锁：在<code>mtx.Lock()</code>后马上<code>defer mtx.Unlock()</code></p></li><li><p><code>string(1)</code>是错误的</p></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token keyword">var</span> a <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span>
	b <span class="token operator">:=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin">int64</span><span class="token punctuation">{</span><span class="token punctuation">}</span>

	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>b <span class="token operator">==</span> <span class="token boolean">nil</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">package</span> main

<span class="token keyword">import</span> <span class="token string">&quot;fmt&quot;</span>

<span class="token keyword">type</span> Point <span class="token keyword">struct</span> <span class="token punctuation">{</span>
	x<span class="token punctuation">,</span> y <span class="token builtin">int</span>
<span class="token punctuation">}</span>

<span class="token keyword">func</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	p <span class="token operator">:=</span> Point<span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Println</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token comment">// {1 2}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;p=%v\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">// p={1 2}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;p=%+v\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">// p={x:1 y:2}</span>
	fmt<span class="token punctuation">.</span><span class="token function">Printf</span><span class="token punctuation">(</span><span class="token string">&quot;p=%#v\\n&quot;</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token comment">// p=main.Point{x:1, y:2}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li></li>`,6);function M(U,S){const a=p("ExternalLinkIcon");return l(),c("div",null,[r,k,m,n("ul",null,[n("li",null,[n("a",v,[s("GOSUMDB 环境变量"),e(a)]),s("。")])]),b,n("ul",null,[n("li",null,[n("p",null,[n("a",h,[s("GOPROXY"),e(a)]),s("。")])]),g,f,n("li",null,[n("p",null,[n("a",_,[s("GO111MODULE"),e(a)])])]),x,n("li",null,[n("p",null,[n("a",y,[s("匿名字段和内嵌结构体"),e(a)])])]),n("li",null,[n("p",null,[n("a",w,[P,e(a)])])]),q,n("li",null,[n("p",null,[O,n("a",G,[s("链接"),e(a)]),s("。")])]),B])])}const I=o(d,[["render",M],["__file","知识点.html.vue"]]);export{I as default};
