import{_ as n,o as s,c as a,e}from"./app-M6OZmubj.js";const o={},t=e(`<h1 id="错误处理逻辑" tabindex="-1"><a class="header-anchor" href="#错误处理逻辑" aria-hidden="true">#</a> 错误处理逻辑</h1><p>为了方便错误处理，推荐服务端返回的响应结构尽量遵循如下格式：</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">enum</span> ErrorShowType <span class="token punctuation">{</span>
    <span class="token constant">SILENT</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
    <span class="token constant">WARN_MESSAGE</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
    <span class="token constant">ERROR_MESSAGE</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span>
    <span class="token constant">NOTIFICATION</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token constant">REDIRECT</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>

<span class="token keyword">interface</span> <span class="token class-name">ResponseStructure</span> <span class="token punctuation">{</span>
    <span class="token punctuation">[</span>key<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    data<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">;</span>
    errorCode<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    errorMessage<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
    showType<span class="token operator">?</span><span class="token operator">:</span> ErrorShowType<span class="token punctuation">;</span>
    traceId<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>errorCode</code>为<code>0</code>，表示请求成功；<code>errorCode</code>不为<code>0</code>，表示业务逻辑发生异常。</li><li><code>errorMessage</code>作为简单的错误说明，用于前端错误展示。</li><li><code>showType</code>的不同值决定了不同的错误展示形式，比如<code>Toast.warn</code>、<code>Toast.error</code>、<code>Notification.error</code>。</li></ul>`,4),p=[t];function c(r,l){return s(),a("div",null,p)}const d=n(o,[["render",c],["__file","错误处理逻辑.html.vue"]]);export{d as default};
