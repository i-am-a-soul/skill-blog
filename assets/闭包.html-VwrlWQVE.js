import{_ as s,r as e,o as t,c as o,a as n,b as c,d as p,e as l}from"./app-M6OZmubj.js";const i={},u=l(`<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><p>定义：函数嵌套函数时，内层函数引用了外层函数作用域下的变量，并且内层函数在全局环境下可访问，进而形成闭包。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">numGenerator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token operator">++</span> num
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">var</span> getNum <span class="token operator">=</span> <span class="token function">numGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个简单的闭包示例中，<code>numGenerator</code>创建了一个变量<code>num</code>，接着返回打印<code>num</code>值的匿名函数，这个函数引用了变量<code>num</code>，使得在外部可以通过调用<code>getNum</code>方法访问变量<code>num</code>，因此在<code>numGenerator</code>执行完毕后，即相关调用栈出栈后，变量<code>num</code>不会消失，仍然有机会被外界访问。</p><p>参考资料：</p>`,5),r={href:"https://sanyuan0704.github.io/javascript/004.html#%E4%BB%80%E4%B9%88%E6%98%AF%E9%97%AD%E5%8C%85%EF%BC%9F",target:"_blank",rel:"noopener noreferrer"};function d(m,k){const a=e("ExternalLinkIcon");return t(),o("div",null,[u,n("ul",null,[n("li",null,[n("a",r,[c("谈谈你对闭包的理解"),p(a)])])])])}const _=s(i,[["render",d],["__file","闭包.html.vue"]]);export{_ as default};
