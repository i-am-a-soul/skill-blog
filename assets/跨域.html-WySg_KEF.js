import{_ as o,r as t,o as i,c as p,a as n,b as s,d as a,e as c}from"./app-M6OZmubj.js";const d="/skill-blog/img/0019.png",l="/skill-blog/img/0025.png",r="/skill-blog/img/0026.png",u="/skill-blog/img/0027.png",v={},m=n("h1",{id:"跨域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#跨域","aria-hidden":"true"},"#"),s(" 跨域")],-1),k=n("h2",{id:"什么是跨域",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#什么是跨域","aria-hidden":"true"},"#"),s(" 什么是跨域")],-1),h={href:"https://developer.mozilla.org/zh-CN/docs/Web/Security/Same-origin_policy",target:"_blank",rel:"noopener noreferrer"},b=c('<p>例子：</p><p><img src="'+d+`" alt=""></p><h2 id="jsonp-json-with-padding" tabindex="-1"><a class="header-anchor" href="#jsonp-json-with-padding" aria-hidden="true">#</a> <code>JSONP</code>（<code>JSON with Padding</code>）</h2><p><code>JSONP</code>算是一种“曲线救国”的方式，虽然<code>AJAX</code>请求必须同源，但是<code>HTML</code>上通过标签请求的资源文件，比如<code>CSS</code>样式文件、<code>PNG</code>图片文件、<code>JS</code>脚本文件却是可以不同源的（所以很多网站会使用<code>CDN</code>服务器将这些资源缓存起来，从而减少用于请求这些文件的时间）。这种方法就是创建一个<code>script</code>，浏览器识别标签后会向指定的网址发送<code>GET</code>请求，获得脚本内容并执行，这个脚本内部通常会声明一个函数或变量以供调用。示例如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token comment">// 请求脚本后的回调函数</span>
    <span class="token keyword">var</span> <span class="token function-variable function">getData</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">data</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 请求地址</span>
    <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">&#39;http://xxx/jsonp.js?id=1&amp;callback=getData&#39;</span>

    <span class="token comment">// 创建 script 标签</span>
    <span class="token keyword">var</span> script <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">&#39;script&#39;</span><span class="token punctuation">)</span>
    script<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">&#39;src&#39;</span><span class="token punctuation">,</span> url<span class="token punctuation">)</span>
    document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">&#39;body&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>script<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

// jsonp.js
(function () {
    getData(1234)
}())
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>页面通过<code>script</code>标签向另一个服务器端请求数据时，也带上了参数<code>id</code>和<code>callback</code>，服务器端据此生成对应的脚本文件（将数据填充入脚本中）并调用回调函数。这样就完成一次数据的请求操作。但是缺点也很明显：只能通过地址栏提交一些简单的参数，而且这种显式传递方式也非常不安全，通常也需要服务器端支持生成对应的文件。</p><p>缺点：</p><ul><li>只支持<code>GET</code>方法</li><li>发送的不是<code>xhr</code>请求</li></ul><h2 id="cors-cross-origin-resource-sharing" tabindex="-1"><a class="header-anchor" href="#cors-cross-origin-resource-sharing" aria-hidden="true">#</a> <code>CORS</code>（<code>Cross-Origin Resource Sharing</code>）</h2><p>虽然为了安全起见，默认采用同源策略，但是<code>W3C</code>还是开了个后门叫作“跨域资源共享”。</p><p>这种跨域方式要求前后端同时支持，并且需要在返回头部字段做修改，操作起来相对复杂。这种跨域方式将请求类型分为两种——简单请求和非简单请求，针对不同情况需要分别处理。</p><h3 id="简单请求" tabindex="-1"><a class="header-anchor" href="#简单请求" aria-hidden="true">#</a> 简单请求</h3><p>需要同时满足两个条件：</p><ul><li>请求方法为<code>GET</code>、<code>HEAD</code>、<code>POST</code>之一；</li><li>请求头部只能包含<code>Accept</code>、<code>Accept-Language</code>、<code>Content-Language</code>、<code>Content-Type</code>（值只能为<code>text/plain</code>、<code>multipart/form-data</code>、<code>application/x-www-form-urlencoded</code>之一）、<code>DPR</code>、<code>Downlink</code>、<code>Save-Data</code>、<code>Viewport-Width</code>、<code>Width</code>这些字段。</li></ul><p>浏览器发送请求的时候会在头部的<code>Origin</code>字段带上本次请求的“源”信息（协议<code>+</code>域名<code>+</code>端口），服务器端会返回能够接受的源，“<code>*</code>”表示可以接受任意源的请求。</p><p><code>MDN</code>上的一张图显示了一次请求中浏览器和服务器端的交互过程，如图所示。</p><p><img src="`+l+'" alt=""></p><h3 id="非简单请求" tabindex="-1"><a class="header-anchor" href="#非简单请求" aria-hidden="true">#</a> 非简单请求</h3><p>非简单请求在发送之前，需要先使用<code>OPTIONS</code>方法发起一个预检请求到服务器端，以获知服务器端是否允许该实际请求。预检请求的使用，可以避免跨域请求对服务器端的用户数据产生未预期的影响。</p><p>只有得到服务器端确认允许请求之后才可以发送请求。</p><p>依旧借用<code>MDN</code>上的一张图显示一次非简单请求中浏览器和服务器端的交互过程。</p><p><img src="'+r+'" alt=""></p><p>参考资料：</p>',23),g={href:"http://www.ruanyifeng.com/blog/2016/04/cors.html",target:"_blank",rel:"noopener noreferrer"},_={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CORS",target:"_blank",rel:"noopener noreferrer"},f=c('<h2 id="反向代理" tabindex="-1"><a class="header-anchor" href="#反向代理" aria-hidden="true">#</a> 反向代理</h2><p>反向代理是最常用也是最推荐的方式，那么什么是反向代理呢？</p><p>简言之，反向代理就是代理服务器负责响应浏览器（实际上也有可能是其他客户端，这里为了叙述方便，我们只考虑浏览器作为客户端的情况）发出的请求，将请求区分成两类：一类是资源文件，比如<code>JS</code>、<code>HTML</code>、<code>CSS</code>、<code>PNG</code>，直接读取文件或缓存并返回；其他请求都直接转发给后端服务器，然后接收后端服务器返回的结果并返回给浏览器。</p><p>反向代理发送请求和响应请求的流程如图所示。</p><p><img src="'+u+`" alt=""></p><p><strong>反向代理利用的原理就是通过代理服务器把浏览器与服务器端之间的通信转化为服务器端与服务器端之间的通信，而服务器端之间是没有同源策略和跨域之说的</strong>。当然整个流程需要对代理服务器进行配置，配置对应的转发规则，比如根据请求后缀或路径转发对应的请求等。</p><p>生产环境中最常用的反向代理服务器当属俄罗斯开发的<code>Nginx</code>，它使用简单（一条命令即可启动）而且支持丰富的配置（转发、负载均衡、压缩等）。截取一段配置文件进行举例说明：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># 配置一个服务器端
server {
    # 端口为 2017
    listen 2017;

    # 配置根路径，资源文件请求将会在此目录下查找
    root /usr/share/nginx/html;

    # 网站根路径请求返回的文件
    index index.html;

    # 规则，对以 /api 开头的请求进行操作
    location /api {
        # 转发服务器端地址
        proxy_pass http://localhost:2018;
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这个实例中，默认请求都会在磁盘上<code>/usr/share/nginx/html</code>目录下查找对应的文件，如果请求以<code>/api</code>开头，则会转发到<code>http://localhost:2018</code>。这样我们在浏览器端发送<code>AJAX</code>请求的时候，只需要加上<code>/api</code>前缀即可。</p><p>这种跨域方式之所以不叫“代理”而称为“反向代理”，那是因为还存在“正向代理”。刚才我们讲到反向代理的转发规则对于浏览器客户端而言是不可知的，用户不知道真正的后端地址，而正向代理的转发规则是由客户端进行指定的，服务器端不知道真实的客户端是谁，这种方式即常用的<code>VPN</code>。</p><p>开发中就可以通过正向代理的方式实现跨域。例如<code>Webpack</code>构建的<code>webpack-dev-server</code>插件就支持代理的配置：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">devServer</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token comment">// 代理配置</span>
    <span class="token literal-property property">proxy</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 代理规则，以 /api/ 开头的请求将会进行转发</span>
        <span class="token string-property property">&#39;/api/*&#39;</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token comment">// 转发地址</span>
            <span class="token literal-property property">target</span><span class="token operator">:</span> <span class="token string">&#39;http://localhost:5000&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>通过代理的配置可以直接指向任意的服务器地址，方便开发和调试。</p><p>讲完正向代理再回到反向代理，反向代理不光可以解决跨域问题，还可以用于以下方面：</p><ul><li>保障服务器安全，因为隐藏了真实的服务器端地址；</li><li>负载均衡，通过转发策略向多个服务器端进行请求转发；</li><li>缓存静态内容。</li></ul>`,15);function x(S,y){const e=t("ExternalLinkIcon");return i(),p("div",null,[m,k,n("p",null,[n("a",h,[s("浏览器的同源策略"),a(e)]),s("。")]),b,n("ul",null,[n("li",null,[n("a",g,[s("跨域资源共享 CORS 详解"),a(e)])]),n("li",null,[n("a",_,[s("跨源资源共享（CORS）"),a(e)])])]),f])}const w=o(v,[["render",x],["__file","跨域.html.vue"]]);export{w as default};
