import{_ as n,o as s,c as a,e}from"./app-M6OZmubj.js";const o={},c=e(`<h1 id="代码规范" tabindex="-1"><a class="header-anchor" href="#代码规范" aria-hidden="true">#</a> 代码规范</h1><ol><li><p>不允许使用<code>String</code>、<code>Number</code>、<code>Boolean</code>、<code>Function</code>、<code>any</code>等非安全类型，应该使用<code>string</code>、<code>number</code>、<code>boolean</code>、<code>(...args: T[]) =&gt; R</code>、<code>unknown</code>等类型。</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// good</span>
<span class="token keyword">function</span> <span class="token function">insertHTML</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
<span class="token keyword">const</span> httpRequest <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HTTPRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// bad</span>
<span class="token keyword">function</span> <span class="token function">insertHtml</span><span class="token punctuation">(</span><span class="token parameter">element<span class="token punctuation">,</span> html</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>应该使用<code>Object.keys</code>或<code>Object.entries</code>遍历对象，而不是<code>for...in</code>。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// good</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> val <span class="token operator">=</span> obj<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// good</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span> <span class="token keyword">of</span> Object<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>优先使用<code>ES6 Module</code>规范的第三方库</p><ul><li><code>CommonJS</code>规范无法<code>Tree Shaking。</code></li><li>很多<code>CommonJS</code>规范的库含有自己的<code>polyfill</code>，容易造成<code>polyfill</code>的重复引入。</li></ul></li><li><p>当<code>a</code>标签指定<code>target=&quot;_blank&quot;</code>时，如果<code>href</code>是完整的<code>http</code>地址，那么应该指定<code>rel=&quot;noreferer noopener&quot;</code>。</p></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// namespace 是 ES Module 规范出现之前的过时的模块组织方式，不应该再使用</span>
module foo <span class="token punctuation">{</span><span class="token punctuation">}</span>
namespace foo <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>派生类的构造函数必须调用<code>super()</code>，非派生类的构造函数不能调用<code>super()</code>，否则可能引发运行时错误。</p></li><li><p>派生类的构造函数中调用<code>super()</code>前，不能使用<code>this</code>或<code>super</code>对象，否则会引发引用错误。</p></li></ol>`,2),t=[c];function p(i,l){return s(),a("div",null,t)}const u=n(o,[["render",p],["__file","代码规范.html.vue"]]);export{u as default};
