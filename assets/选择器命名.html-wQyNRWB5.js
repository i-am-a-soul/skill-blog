import{_ as n,o as a,c as s,e as t}from"./app-M6OZmubj.js";const e="/skill-blog/img/0033.png",p={},c=t('<h1 id="选择器命名" tabindex="-1"><a class="header-anchor" href="#选择器命名" aria-hidden="true">#</a> 选择器命名</h1><h2 id="bem" tabindex="-1"><a class="header-anchor" href="#bem" aria-hidden="true">#</a> <code>BEM</code></h2><p><code>BEM</code>是<code>Block</code>、<code>Element</code>、<code>Modifier</code>的首字母简称，是当下使用比较多、被讨论次数也比较多的一种命名方式。它的核心原则就是通过<code>Block</code>、<code>Element</code>、<code>Modifier</code>三者的组合来减少选择器的嵌套使用。</p><p><img src="'+e+`" alt=""></p><ul><li><code>Block</code>。块是最大的独立“作用域”，它不依赖其他选择器产生作用，可以绑定在任何<code>DOM</code>元素上，同时只能是字母、数字、横线组成的类选择器，比如“<code>.block</code>”。</li><li><code>Element</code>。元素同样只能是类选择器，可以由字母、数字、横线、下划线组成，名称带有语义，并由模块名作前缀，通过双下划线连接，比如“<code>.block__elem</code>”。</li><li><code>Modifier</code>。修饰语用来表示元素或块的外部形式、行为、状态，可以由字母、数字、横线、下划线组成，修饰语前面必须带有模块名或元素名，通过双横线连接。同样只使用样式类，推荐配合元素或者块嵌套使用而不是单独使用，比如“<code>.block.block--mod</code>”。</li></ul><h2 id="amcss" tabindex="-1"><a class="header-anchor" href="#amcss" aria-hidden="true">#</a> <code>AMCSS</code></h2><p><code>BEM</code>中推崇所有样式选择器都以类的形式命名，这样带来的一个好处就是大家权值一样，方便样式覆盖，而<code>AMCSS</code>则另辟蹊径，提倡使用属性选择器以及对应的值来作为选择器。</p><p>如果你使用过<code>Bootstrap</code>的按钮样式，一定熟悉下面的代码：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-primary btn-lg<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Large primary button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>这里使用了<code>3</code>个样式类，如果改成<code>AMCSS</code>方式应该是这样：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">am-Button</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary large<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Large primary button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于<code>HTML</code>标签属性不区分大小写，所以可以写成：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">am-button</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>primary large<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Large primary button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果只使用了<code>btn</code>一个样式类，那么可以写成无值的属性：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Bootstrap --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>btn btn-default<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> Default button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- AMCSS --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">am-Button</span><span class="token punctuation">&gt;</span></span> Default button <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当然定义样式的时候和类选择器也有些区别：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">[am-Button]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token selector">[am-Button~=&quot;primary&quot;]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token selector">[am-Button~=&quot;large&quot;]</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中“<code>~=</code>”符号表示属性包含某个值时匹配。</p><p><code>am</code>开头表示该属性为样式选择器，以避免和其他属性混淆。这种写法带来的好处就是省略了很多重复的修饰名称，比如上面样式类中的“<code>btn-</code>”。</p><p>另外值得一提的是，属性选择器虽然因为权重较高且不易识别，所以在开发中使用频率不如类选择器，但是有时候使用起来也有奇效，比如<code>VueJS</code>中的组件实现样式的独立作用域，就是通过将随机属性作为父选择器来实现的。</p><h2 id="面向属性命名" tabindex="-1"><a class="header-anchor" href="#面向属性命名" aria-hidden="true">#</a> 面向属性命名</h2><p>前面提到的两种命名方式其实都有一个共同点，那就是面向语义化的。简单地说，这些样式都是为了修改某个元素或块的，这么一来，如果我们想将这些样式复用到其他标签元素上，就变得相当困难。</p><p>面向属性命名方式则截然不同，它是无语义的。这种命名方式主张把样式都拆成最小粒度，即一个样式类中只包含一个属性，然后根据属性名和属性值进行命名，这样的命名不但去除了语义，而且可根据名称快速识别样式内容。而需要使用的时候就会像拼积木一样，把一个一个样式类组合在一起使用。比如一个宽为<code>60</code>像素，高为<code>20</code>像素，背景色为白色的<code>div</code>元素可能拥有下面的样式：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>w60 h20 bgwh<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>它对应的样式类为：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.w60</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.h20</span> <span class="token punctuation">{</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.bgwh</span> <span class="token punctuation">{</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>如果样式属性较多，那么岂不是要使用很多样式类？</li><li>像宽度和高度这种值需要针对每个像素都定义一个类吗？</li></ul><p>这两个疑问正是这种命名方式的缺陷所在，所以为了处理这个问题，我们来思考一下解决方法。</p><ul><li>样式类太多确实会导致可读性下降，所以应该考虑将一部分最常用的样式抽取出来，而另一部分作为标签元素的专有样式。</li><li>理论上来说，像高度、宽度、边距这类属性的值有无穷多个（或者非常多个），如果给每个值都定义一个样式则会使<code>CSS</code>变得非常臃肿。所以这类属性不适合使用面向属性命名，而适合被语义化。</li></ul><p>基于以上两点，我们可以得出一个结论：那些常用的属性并且属性值为有限个（数量较少）的样式适合使用面向属性命名法则。同时还可以对这种命名方式进行小小的优化，比如把属性名和属性值用短横线隔开，就像下面的样子：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.d-b</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.d-ib</span> <span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.t-0</span> <span class="token punctuation">{</span>
    <span class="token property">top</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>&quot;<code>.t-0</code>&quot;样式算是一个例外，因为经常需要配合非静态定位使用，所以也可以单独使用面向属性命名。这样的好处是有时候我们编写页面或组件的时候可以直接复用已有的属性。</p><p>所以综合以上几种命名方式，比较推荐的做法是先按照优化后的面向属性原则来抽取公共样式，然后针对各个公用组件按照<code>BEM</code>或者<code>AMCSS</code>原则命名语义化样式。</p>`,33),o=[c];function l(i,u){return a(),s("div",null,o)}const r=n(p,[["render",l],["__file","选择器命名.html.vue"]]);export{r as default};
