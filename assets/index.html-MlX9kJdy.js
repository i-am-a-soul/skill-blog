import{_ as t,r as l,o as s,c as r,f as c,g as i,a as e,b as o,d as n,e as d}from"./app-M6OZmubj.js";const p="/skill-blog/img/0014.png",h="/skill-blog/img/0042.png",u="/skill-blog/img/0043.png",b="/skill-blog/img/0047.jpg",m={},g=d('<h1 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h1><h2 id="背景" tabindex="-1"><a class="header-anchor" href="#背景" aria-hidden="true">#</a> 背景</h2><p class="codepen" data-height="300" data-theme-id="light" data-default-tab="css,result" data-slug-hash="NWpEWdO" data-user="i-am-a-soul" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em;"><span>See the Pen <a href="https://codepen.io/i-am-a-soul/pen/NWpEWdO"></a> by Splay (<a href="https://codepen.io/i-am-a-soul">@i-am-a-soul</a>) on <a href="https://codepen.io">CodePen</a>.</span></p>',3),f=d('<h2 id="inline元素" tabindex="-1"><a class="header-anchor" href="#inline元素" aria-hidden="true">#</a> <code>inline</code>元素</h2><p><code>width</code>与<code>height</code>在<code>img</code>上有效。</p><p class="codepen" data-height="300" data-theme-id="light" data-default-tab="css,result" data-slug-hash="GRmWeBM" data-user="i-am-a-soul" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em;"><span>See the Pen <a href="https://codepen.io/i-am-a-soul/pen/GRmWeBM"> inline</a> by Splay (<a href="https://codepen.io/i-am-a-soul">@i-am-a-soul</a>) on <a href="https://codepen.io">CodePen</a>.</span></p>',3),x=e("p",null,[e("img",{src:p,alt:""})],-1),v={href:"https://zhuanlan.zhihu.com/p/31645001",target:"_blank",rel:"noopener noreferrer"},_=d('<h2 id="inline-block元素" tabindex="-1"><a class="header-anchor" href="#inline-block元素" aria-hidden="true">#</a> <code>inline-block</code>元素</h2><p>内联块级元素，其相对于内联元素的优点就是可以设置宽高。当然它也有一个缺陷，即使用<code>inline-block</code>的元素之间会出现间距。不过这个问题可以通过将父元素的字体大小<code>font-size</code>设置为<code>0</code>，然后再单独设置各个元素字体大小的方式解决。</p><p class="codepen" data-height="300" data-theme-id="light" data-default-tab="css,result" data-slug-hash="QWvVGvW" data-user="i-am-a-soul" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em;"><span>See the Pen <a href="https://codepen.io/i-am-a-soul/pen/QWvVGvW"> inline-block</a> by Splay (<a href="https://codepen.io/i-am-a-soul">@i-am-a-soul</a>) on <a href="https://codepen.io">CodePen</a>.</span></p>',3),k=d(`<h2 id="如何解决页面动画效果卡顿问题" tabindex="-1"><a class="header-anchor" href="#如何解决页面动画效果卡顿问题" aria-hidden="true">#</a> 如何解决页面动画效果卡顿问题</h2><ul><li>一般来说，<code>CSS3</code>动画会比基于<code>JavaScript</code>实现的动画效率更高，因此会优先使用<code>CSS3</code>来实现动画。</li><li>在使用<code>CSS3</code>实现动画时，要考虑开启<code>GPU</code>加速（这一点并不总是产生正面效果）。</li><li>优先使用资源消耗最低的<code>transform</code>和<code>opacity</code>属性。</li><li>使用<code>will-change</code>属性。</li><li>独立合成层，减少绘制区域。</li><li>对于只能使用<code>JavaScript</code>实现动画效果的情况，可以考虑使用<code>requestAnimationFrame</code>和<code>requestIdleCallback API</code>。</li><li>批量进行样式变换，减少布局抖动。</li></ul><h2 id="横排块级元素" tabindex="-1"><a class="header-anchor" href="#横排块级元素" aria-hidden="true">#</a> 横排块级元素</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix::after</span> <span class="token punctuation">{</span> // 父容器
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span>
    <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token property">float</span><span class="token punctuation">:</span> left<span class="token punctuation">;</span> // 子元素
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="box" tabindex="-1"><a class="header-anchor" href="#box" aria-hidden="true">#</a> <code>box</code></h2><ul><li><code>block box</code>，指<code>display</code>属性为<code>block</code>、<code>list-item</code>、<code>table</code>的元素。</li><li><code>inline box</code>，指<code>display</code>属性为<code>inline</code>、<code>inline-block</code>、<code>inline-table</code>的元素。</li></ul><h2 id="单行文本溢出隐藏" tabindex="-1"><a class="header-anchor" href="#单行文本溢出隐藏" aria-hidden="true">#</a> 单行文本溢出隐藏</h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.ellipsis</span> <span class="token punctuation">{</span>
    <span class="token property">white-space</span><span class="token punctuation">:</span> nowrap<span class="token punctuation">;</span>
    <span class="token property">overflow</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>
    <span class="token property">text-overflow</span><span class="token punctuation">:</span> ellipsis<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="footer的位置" tabindex="-1"><a class="header-anchor" href="#footer的位置" aria-hidden="true">#</a> <code>footer</code>的位置</h2><p class="codepen" data-height="300" data-theme-id="light" data-default-tab="css,result" data-slug-hash="ExmMpvP" data-user="i-am-a-soul" style="height:300px;box-sizing:border-box;display:flex;align-items:center;justify-content:center;border:2px solid;margin:1em 0;padding:1em;"><span>See the Pen <a href="https://codepen.io/i-am-a-soul/pen/ExmMpvP"> 自适应footer</a> by Splay (<a href="https://codepen.io/i-am-a-soul">@i-am-a-soul</a>) on <a href="https://codepen.io">CodePen</a>.</span></p>`,10),y=d('<h2 id="几种绝对长度单位" tabindex="-1"><a class="header-anchor" href="#几种绝对长度单位" aria-hidden="true">#</a> 几种绝对长度单位</h2><p>最常用、最基础的是像素（<code>px</code>）。不常用的绝对单位是<code>mm</code>（毫米）、<code>cm</code>（厘米）、<code>in</code>（英寸）、<code>pt</code>（点，印刷术语，<code>1 / 72</code>英寸）、<code>pc</code>（派卡，印刷术语，<code>12</code>点）。这些单位都可以通过公式互相换算：<code>1in = 25.4mm = 2.54cm = 6pc = 72pt = 96px</code>。因此，<code>16px</code>等于<code>12pt</code>（<code>16 / 96 × 72</code>）。</p><p>像素是一个具有误导性的名称，<code>CSS</code>像素并不严格等于显示器的像素，尤其在高清屏（视网膜屏）下。尽管<code>CSS</code>单位会根据浏览器、操作系统或者硬件适当缩放，在某些设备或者用户的分辨率设置下也会发生变化，但是<code>96px</code>通常等于一个物理英寸的大小。</p><h2 id="定位" tabindex="-1"><a class="header-anchor" href="#定位" aria-hidden="true">#</a> 定位</h2><p>如果元素使用了静态定位，那么就说它未被定位。</p><p><strong>绝对定位元素的位置和宽高相对于最近祖先定位元素的<code>padding box</code></strong>，如果祖先元素都没有定位，那么绝对定位的元素会基于初始包含块（<code>initial containing block</code>）来定位。初始包含块跟视口一样大，固定在网页的顶部。</p><p>通过<code>position: relative</code>创建定位包含块。</p><p>跟固定定位或者绝对定位不一样，不能用<code>top</code>、<code>right</code>、<code>bottom</code>和<code>left</code>改变相对定位元素的大小。这些值只能让元素在上、下、左、右方向移动。可以用<code>top</code>或者<code>bottom</code>，但它们不能一起用（<code>bottom</code>会被忽略）。同理，可以用<code>left</code>或者<code>right</code>，但它们也不能一起用（<code>right</code>会被忽略）。</p><h2 id="层叠的规则" tabindex="-1"><a class="header-anchor" href="#层叠的规则" aria-hidden="true">#</a> 层叠的规则</h2><p>当声明冲突时，层叠会依据三种条件解决冲突：</p><ol><li>样式表的来源：样式是从哪里来的，包括 <ul><li>作者样式表</li><li>用户代理样式表（即浏览器默认样式）</li><li>用户样式表（少见）</li></ul></li><li>选择器优先级：哪些选择器比另一些选择器更重要。</li><li>源码顺序：样式在样式表里的声明顺序。</li></ol><p><img src="'+h+'" alt=""></p><h2 id="important声明" tabindex="-1"><a class="header-anchor" href="#important声明" aria-hidden="true">#</a> <code>!important</code>声明</h2><p><strong>样式表的来源</strong>规则有一个例外：标记为重要（<code>important</code>）的声明。如下所示，在声明的后面、分号的前面加上<code>!important</code>，该声明就会被标记为重要的声明。</p><p><code>color: red !important;</code></p><p>标记了<code>!important</code>的声明会被当作更高优先级的样式表来源，因此总体的优先级按照由高到低排列如下所示：</p><ol><li>作者样式表的<code>!important</code></li><li>作者样式表</li><li>用户代理样式表</li></ol><h2 id="选择器优先级" tabindex="-1"><a class="header-anchor" href="#选择器优先级" aria-hidden="true">#</a> 选择器优先级</h2><ul><li><p><code>1 0 0</code>：<code>id</code></p></li><li><p><code>0 1 0</code>：类、伪类、属性</p></li><li><p><code>0 0 1</code>：标签、伪元素</p></li></ul><p>通用选择器（<code>*</code>）和组合器（<code>&gt;</code>、<code>+</code>、<code>~</code>）对优先级没有影响。</p><h2 id="继承值与初始值" tabindex="-1"><a class="header-anchor" href="#继承值与初始值" aria-hidden="true">#</a> 继承值与初始值</h2><p>在不考虑<code>inherit</code>和<code>initial</code>关键字的情况下：</p><p><img src="'+u+`" alt=""></p><h2 id="全局修改盒模型为border-box" tabindex="-1"><a class="header-anchor" href="#全局修改盒模型为border-box" aria-hidden="true">#</a> 全局修改盒模型为<code>border-box</code></h2><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">:root</span> <span class="token punctuation">{</span>
    <span class="token property">box-sizing</span><span class="token punctuation">:</span> border-box<span class="token punctuation">;</span> <span class="token comment">/* 根元素设置为 border-box */</span>
<span class="token punctuation">}</span>

<span class="token selector">*,
::before,
::after</span> <span class="token punctuation">{</span>
    <span class="token property">box-sizing</span><span class="token punctuation">:</span> inherit<span class="token punctuation">;</span> <span class="token comment">/* 告诉其他所有元素和伪元素继承其盒模型 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="全局设置上下堆叠的元素的间距" tabindex="-1"><a class="header-anchor" href="#全局设置上下堆叠的元素的间距" aria-hidden="true">#</a> 全局设置上下堆叠的元素的间距</h2><p>将<code>body</code>放在猫头鹰选择器的前面，这样猫头鹰选择器就只能选中<code>body</code>内的元素。如果直接使用猫头鹰选择器，它还会选中<code>body</code>元素，因为它是<code>head</code>元素的相邻兄弟节点。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">body * + *</span> <span class="token punctuation">{</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 1.5em<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="lines" tabindex="-1"><a class="header-anchor" href="#lines" aria-hidden="true">#</a> <code>Lines</code></h2><p><img src="`+b+'" alt=""></p><h2 id="重新布局与重新绘制" tabindex="-1"><a class="header-anchor" href="#重新布局与重新绘制" aria-hidden="true">#</a> 重新布局与重新绘制</h2><p>渲染（<code>render</code>）<code>=</code>布局（<code>flow</code>）<code>+</code>绘制（<code>paint</code>）。</p><p>重新布局一定会进行重新绘制，而重新绘制不一定会引起重新布局。</p><p>参考资料：</p>',34),S={href:"https://zhuanlan.zhihu.com/p/342371522",target:"_blank",rel:"noopener noreferrer"},z=d('<h2 id="响应式布局" tabindex="-1"><a class="header-anchor" href="#响应式布局" aria-hidden="true">#</a> 响应式布局</h2><ul><li><p>传统布局</p></li><li><p>相对单位布局</p></li><li><p>通过媒体查询实现的响应式布局</p></li><li><p>基于相对单位<code>rem</code>的<code>flexible</code>布局</p></li><li><p><code>flex</code>布局</p></li><li><p><code>grid</code>布局</p></li><li><p>借助<code>JavaScript</code>进行布局</p></li></ul><h2 id="多语言" tabindex="-1"><a class="header-anchor" href="#多语言" aria-hidden="true">#</a> 多语言</h2><table><thead><tr><th style="text-align:left;">汉字字数</th><th>英文需要的空间</th></tr></thead><tbody><tr><td style="text-align:left;">5 及以下</td><td>200%</td></tr><tr><td style="text-align:left;">5 - 10</td><td>180%</td></tr><tr><td style="text-align:left;">11 - 15</td><td>160%</td></tr><tr><td style="text-align:left;">15 - 25</td><td>140%</td></tr><tr><td style="text-align:left;">25及以上</td><td>130%</td></tr></tbody></table><h2 id="书写顺序" tabindex="-1"><a class="header-anchor" href="#书写顺序" aria-hidden="true">#</a> 书写顺序</h2><ul><li><code>Formatting Model</code>（布局方式、位置）相关属性：<code>position</code>、<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code>、<code>float</code>、<code>display</code>、<code>overflow</code>等</li><li><code>Box Model</code>（尺寸）相关属性：<code>border</code>、<code>margin</code>、<code>padding</code>、<code>width</code>、<code>height</code>等</li><li><code>Typographic</code>（文本）相关属性：<code>font</code>、<code>line-height</code>、<code>text-align</code>、<code>word-wrap</code>等</li><li><code>Visual</code>（视觉效果）相关属性：<code>background</code>、<code>color</code>、<code>transition</code>、<code>list-style</code>等</li></ul><h2 id="其他" tabindex="-1"><a class="header-anchor" href="#其他" aria-hidden="true">#</a> 其他</h2>',7),C=e("li",null,[o("陌生标签的"),e("code",null,"display"),o("："),e("code",null,"inline"),o("。")],-1),w={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/box-sizing",target:"_blank",rel:"noopener noreferrer"},W=e("li",null,"选择器是从右向左解析的，在选择器的右边尽量使用具有唯一性的选择器，而不要使用标签选择器这类容易匹配的选择器。",-1),P=e("li",null,"伪类：状态，伪元素：位置。",-1),N=e("li",null,[o("外边距折叠（"),e("code",null,"Margin collapsing"),o("）只会发生在属于同一个"),e("code",null,"BFC"),o("的"),e("code",null,"block box"),o("之间。")],-1),j=e("li",null,"只有上下外边距会产生折叠，左右外边距不会折叠。",-1),B={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/Replaced_element",target:"_blank",rel:"noopener noreferrer"},E={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/inheritance",target:"_blank",rel:"noopener noreferrer"},M={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/float",target:"_blank",rel:"noopener noreferrer"},V=e("code",null,"float",-1),G=e("code",null,"display",-1),I=d("<li><code>@</code>规则（<code>at-rules</code>）是指用“<code>@</code>”符号开头的语法。</li><li>优先级容易发展为一种“军备竞赛”。在大型项目中这一点尤为突出。通常最好让优先级尽可能低，这样当需要覆盖一些样式时，才能有选择空间。</li><li>在文档中，根节点是所有其他元素的祖先节点。根节点有一个伪类选择器（<code>:root</code>），可以用来选中它自己。这等价于类型选择器<code>html</code>，但是<code>:root</code>的优先级相当于一个类名，而不是一个标签。</li><li>一个无单位的<code>0</code>只能用于长度值和百分比，比如内边距、边框和宽度等，而不能用于角度值，比如度，或者时间相关的值，比如秒。</li><li>在编程中不推荐魔术数值，因为往往难以解释一个魔术数值生效的原因。如果不理解这个数值是怎么来的，就不会知道在不同的情况下会产生什么样的结果。</li><li><code>vertical-align</code>声明只会影响行内元素或者<code>table-cell</code>元素。</li><li><code>meta</code>标签告诉移动设备，你已经特意将网页适配了小屏设备。如果不加这个标签，移动浏览器会假定网页不是响应式的，并且会尝试模拟桌面浏览器，那之前的移动端设计就白做了。</li><li>给水平方向设置的内边距比垂直方向的要多一点，因为从美学上来讲这样更让人愉快。</li><li>状态类一般以<code>is-</code>或<code>has-</code>开头。</li>",9),F={href:"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context",target:"_blank",rel:"noopener noreferrer"},J=e("li",null,[e("code",null,"word-break: break-word;")],-1);function L(R,T){const a=l("ExternalLinkIcon");return s(),r("div",null,[g,(s(),c(i("script"),{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"})),f,(s(),c(i("script"),{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"})),x,e("p",null,[o("参考资料："),e("a",v,[o("细究内联元素（你一定不知道的东西）"),n(a)])]),_,(s(),c(i("script"),{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"})),k,(s(),c(i("script"),{async:"",src:"https://cpwebassets.codepen.io/assets/embed/ei.js"})),y,e("ul",null,[e("li",null,[e("a",S,[o("讲清楚重排或回流、重绘"),n(a)])])]),z,e("ul",null,[C,e("li",null,[e("a",w,[o("box-sizing"),n(a)]),o("。")]),W,P,N,j,e("li",null,[e("a",B,[o("可替换元素"),n(a)]),o("。")]),e("li",null,[e("a",E,[o("继承属性与非继承属性"),n(a)]),o("。")]),e("li",null,[e("a",M,[V,o("与"),G,n(a)]),o("。")]),I,e("li",null,[e("a",F,[o("层叠上下文"),n(a)]),o("。")]),J])])}const A=t(m,[["render",L],["__file","index.html.vue"]]);export{A as default};
