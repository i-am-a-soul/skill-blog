import{_ as e,o as c,c as o,e as d}from"./app-M6OZmubj.js";const p="/skill-blog/img/0030.png",t={},i=d('<h1 id="常见的app" tabindex="-1"><a class="header-anchor" href="#常见的app" aria-hidden="true">#</a> 常见的<code>App</code></h1><p>我们常说的<code>App</code>是<code>Application</code>的简称（相对于后面提到的<code>App</code>，我们可以称之为原生<code>App</code>，<code>Native App</code>），指的是能运行在移动端特定操作系统上的应用程序。这种应用程序由于能直接使用操作系统的<code>API</code>，能够为用户提供最完善最流畅的使用体验。但是其更新体验相对较差，因为每次都需要重新安装软件。对于开发者来说也并不友好，需要修复<code>bug</code>或更新功能发布新版本时，都要经过应用商店的审核，同时还需要用户下载，整个流程相对漫长。我们智能手机默认的很多<code>App</code>就属于这种类型，它们一般不需要单独更新，而是随着系统一起升级。</p><p>而<code>Web App</code>则与之相反，更新无需审核，只需用户刷新页面即可，同时无需安装，访问网址即可使用；具备跨平台能力，只要有浏览器即可运行。但缺点就是流畅性降低，由于浏览器安全策略，不能直接操作系统<code>API</code>，功能受到限制，用户体验大打折扣。很多移动端站点就属于这种类型。</p><p><code>Web App</code>和<code>Native App</code>就像是鱼与熊掌不可兼得。混合应用<code>Hybrid App</code>的出现更像是以中庸之道来解决它们的矛盾。这种<code>App</code>同时存在<code>Web View</code>和<code>Native View</code>，前者用来渲染<code>Web</code>页面，后者用来执行<code>Native App</code>代码。这种<code>App</code>无论在流畅性还是用户体验方面都居于前两者之间。但其打包和调试的困难度有所上升。很多电商类型<code>App</code>属于这种类型。</p><p><img src="'+p+'" alt=""></p><p>那么我们的主角小程序属于哪一类呢？小程序就其运行方式来说属于<code>Hybird App</code>，可以把微信看成跨平台<code>App</code>的外壳，小程序是运行其中的可替换代码；但是其开发方式与<code>Web App</code>又非常接近，文件组成类似<code>Web</code>页面，调试工具类似<code>Chrome</code>浏览器调试工具；同时它又接近<code>Native App</code>的使用体验，审核机制也与<code>Native App</code>类似。如果一定要用一句话来定义小程序的话，那就是比<code>Hybrid App</code>更容易开发、更流畅的跨平台应用，即<code>Hybird App 2.0</code>版。</p><p>小程序其实就是各个公司对混合应用的一层封装，提供了一些<code>SDK</code>，帮开发者省去了一些发布流程，并优化了调试体验。</p>',7),a=[i];function A(r,_){return c(),o("div",null,a)}const n=e(t,[["render",A],["__file","常见的App.html.vue"]]);export{n as default};
