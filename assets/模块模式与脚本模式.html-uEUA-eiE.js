import{_ as e,o,c,e as d}from"./app-M6OZmubj.js";const t={},r=d('<h1 id="模块模式与脚本模式" tabindex="-1"><a class="header-anchor" href="#模块模式与脚本模式" aria-hidden="true">#</a> 模块模式与脚本模式</h1><p><code>TypeScript</code>采用两种模式编译<code>TypeScript</code>文件：模块模式和脚本模式。具体编译为哪个模式，通过一项检测确定：文件中有没有<code>import</code>或<code>export</code>语句。如果有，使用模块模式；否则，使用脚本模式。</p><p>在模块模式下，我们使用<code>import</code>和<code>import()</code>从其他文件中引入代码，使用<code>export</code>把代码开放给其他文件使用。如果想使用第三方<code>UMD</code>模块（注意，<code>UMD</code>模块尝试使用<code>CommonJS</code>、<code>RequireJS</code>或浏览器全局模块，具体取决于环境支持哪个），必须先使用<code>import</code>将其导入，而且不能直接使用全局导出的代码。</p><p>在脚本模式下，声明的顶层变量在项目中的<strong>任何脚本模式的文件</strong>中都可以使用，无需导入，而且，可以放心使用第三方<code>UMD</code>模块中的全局导出，不用事先导入。下述情况使用脚本模式：</p><ul><li>快速验证不打算编译成任何模块系统的浏览器代码（在<code>tsconfig.json</code>中设置<code>{ &quot;module&quot;: &quot;none&quot; }</code>，在<code>HTML</code>文件中直接使用<code>&lt;script /&gt;</code>标签引入。</li><li>创建类型声明。</li></ul>',5),i=[r];function _(n,p){return o(),c("div",null,i)}const a=e(t,[["render",_],["__file","模块模式与脚本模式.html.vue"]]);export{a as default};
